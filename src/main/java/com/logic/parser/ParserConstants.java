/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package com.logic.parser;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int RESET = 1;
  /** RegularExpression Id. */
  int SPACE = 2;
  /** RegularExpression Id. */
  int TAB = 3;
  /** RegularExpression Id. */
  int ENTER = 4;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int LPAR = 7;
  /** RegularExpression Id. */
  int RPAR = 8;
  /** RegularExpression Id. */
  int TOP = 9;
  /** RegularExpression Id. */
  int BOTTOM = 10;
  /** RegularExpression Id. */
  int NOT = 11;
  /** RegularExpression Id. */
  int AND = 12;
  /** RegularExpression Id. */
  int OR = 13;
  /** RegularExpression Id. */
  int CONDITIONAL = 14;
  /** RegularExpression Id. */
  int BICONDITIONAL = 15;
  /** RegularExpression Id. */
  int GENERIC = 16;
  /** RegularExpression Id. */
  int DOT = 17;
  /** RegularExpression Id. */
  int LRPAR = 18;
  /** RegularExpression Id. */
  int RRPAR = 19;
  /** RegularExpression Id. */
  int LBRA = 20;
  /** RegularExpression Id. */
  int RBRA = 21;
  /** RegularExpression Id. */
  int COMMA = 22;
  /** RegularExpression Id. */
  int NUMBER = 23;
  /** RegularExpression Id. */
  int CONSEQUENCE = 24;
  /** RegularExpression Id. */
  int COLON = 25;
  /** RegularExpression Id. */
  int LITERAL = 26;
  /** RegularExpression Id. */
  int VARIABLE = 27;
  /** RegularExpression Id. */
  int FUNCTION = 28;
  /** RegularExpression Id. */
  int PREDICATE = 29;
  /** RegularExpression Id. */
  int UNIVERSAL = 30;
  /** RegularExpression Id. */
  int EXISTENTIAL = 31;
  /** RegularExpression Id. */
  int INEG = 32;
  /** RegularExpression Id. */
  int ENEG = 33;
  /** RegularExpression Id. */
  int ELAND = 34;
  /** RegularExpression Id. */
  int ERAND = 35;
  /** RegularExpression Id. */
  int IAND = 36;
  /** RegularExpression Id. */
  int ILOR = 37;
  /** RegularExpression Id. */
  int IROR = 38;
  /** RegularExpression Id. */
  int EOR = 39;
  /** RegularExpression Id. */
  int ICOND = 40;
  /** RegularExpression Id. */
  int ECOND = 41;
  /** RegularExpression Id. */
  int IUNI = 42;
  /** RegularExpression Id. */
  int EUNI = 43;
  /** RegularExpression Id. */
  int IEXIST = 44;
  /** RegularExpression Id. */
  int EEXIST = 45;
  /** RegularExpression Id. */
  int HYPOTHESIS = 46;

  /** Lexical state. */
  int PL = 0;
  /** Lexical state. */
  int FOL = 1;
  /** Lexical state. */
  int ND = 2;
  /** Lexical state. */
  int DEFAULT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"\\r\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "<SINGLE_LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"(\"",
    "\")\"",
    "\"\\u22a4\"",
    "\"\\u22a5\"",
    "\"\\u00ac\"",
    "\"\\u2227\"",
    "\"\\u2228\"",
    "\"\\u2192\"",
    "\"\\u2194\"",
    "<GENERIC>",
    "\".\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "<NUMBER>",
    "\"\\u22a2\"",
    "\":\"",
    "<LITERAL>",
    "<VARIABLE>",
    "<FUNCTION>",
    "<PREDICATE>",
    "\"\\u2200\"",
    "\"\\u2203\"",
    "\"\\u00acI\"",
    "\"\\u00acE\"",
    "\"\\u2227El\"",
    "\"\\u2227Er\"",
    "\"\\u2227I\"",
    "\"\\u2228Il\"",
    "\"\\u2228Ir\"",
    "\"\\u2228E\"",
    "\"\\u2192I\"",
    "\"\\u2192E\"",
    "\"\\u2200I\"",
    "\"\\u2200E\"",
    "\"\\u2203I\"",
    "\"\\u2203E\"",
    "\"H\"",
  };

}
